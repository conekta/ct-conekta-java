/*
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.conekta.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.conekta.model.PaymentMethodCardRequest;
import com.conekta.model.PaymentMethodCashRequest;
import com.conekta.model.PaymentMethodSpeiRequest;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.conekta.JSON;

import com.fasterxml.jackson.core.type.TypeReference;

import jakarta.ws.rs.core.GenericType;
import jakarta.ws.rs.core.Response;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import com.conekta.JSON;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-05-30T11:12:04.718851-03:00[America/Argentina/Buenos_Aires]")
@JsonDeserialize(using = CreateCustomerPaymentMethodsRequest.CreateCustomerPaymentMethodsRequestDeserializer.class)
@JsonSerialize(using = CreateCustomerPaymentMethodsRequest.CreateCustomerPaymentMethodsRequestSerializer.class)
public class CreateCustomerPaymentMethodsRequest extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(CreateCustomerPaymentMethodsRequest.class.getName());

    public static class CreateCustomerPaymentMethodsRequestSerializer extends StdSerializer<CreateCustomerPaymentMethodsRequest> {
        public CreateCustomerPaymentMethodsRequestSerializer(Class<CreateCustomerPaymentMethodsRequest> t) {
            super(t);
        }

        public CreateCustomerPaymentMethodsRequestSerializer() {
            this(null);
        }

        @Override
        public void serialize(CreateCustomerPaymentMethodsRequest value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
            jgen.writeObject(value.getActualInstance());
        }
    }

    public static class CreateCustomerPaymentMethodsRequestDeserializer extends StdDeserializer<CreateCustomerPaymentMethodsRequest> {
        public CreateCustomerPaymentMethodsRequestDeserializer() {
            this(CreateCustomerPaymentMethodsRequest.class);
        }

        public CreateCustomerPaymentMethodsRequestDeserializer(Class<?> vc) {
            super(vc);
        }

        @Override
        public CreateCustomerPaymentMethodsRequest deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {
            JsonNode tree = jp.readValueAsTree();
            Object deserialized = null;
            boolean typeCoercion = ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS);
            int match = 0;
            JsonToken token = tree.traverse(jp.getCodec()).nextToken();
            // deserialize PaymentMethodCardRequest
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (PaymentMethodCardRequest.class.equals(Integer.class) || PaymentMethodCardRequest.class.equals(Long.class) || PaymentMethodCardRequest.class.equals(Float.class) || PaymentMethodCardRequest.class.equals(Double.class) || PaymentMethodCardRequest.class.equals(Boolean.class) || PaymentMethodCardRequest.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((PaymentMethodCardRequest.class.equals(Integer.class) || PaymentMethodCardRequest.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((PaymentMethodCardRequest.class.equals(Float.class) || PaymentMethodCardRequest.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (PaymentMethodCardRequest.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (PaymentMethodCardRequest.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(PaymentMethodCardRequest.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'PaymentMethodCardRequest'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'PaymentMethodCardRequest'", e);
            }

            // deserialize PaymentMethodCashRequest
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (PaymentMethodCashRequest.class.equals(Integer.class) || PaymentMethodCashRequest.class.equals(Long.class) || PaymentMethodCashRequest.class.equals(Float.class) || PaymentMethodCashRequest.class.equals(Double.class) || PaymentMethodCashRequest.class.equals(Boolean.class) || PaymentMethodCashRequest.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((PaymentMethodCashRequest.class.equals(Integer.class) || PaymentMethodCashRequest.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((PaymentMethodCashRequest.class.equals(Float.class) || PaymentMethodCashRequest.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (PaymentMethodCashRequest.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (PaymentMethodCashRequest.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(PaymentMethodCashRequest.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'PaymentMethodCashRequest'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'PaymentMethodCashRequest'", e);
            }

            // deserialize PaymentMethodSpeiRequest
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (PaymentMethodSpeiRequest.class.equals(Integer.class) || PaymentMethodSpeiRequest.class.equals(Long.class) || PaymentMethodSpeiRequest.class.equals(Float.class) || PaymentMethodSpeiRequest.class.equals(Double.class) || PaymentMethodSpeiRequest.class.equals(Boolean.class) || PaymentMethodSpeiRequest.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((PaymentMethodSpeiRequest.class.equals(Integer.class) || PaymentMethodSpeiRequest.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((PaymentMethodSpeiRequest.class.equals(Float.class) || PaymentMethodSpeiRequest.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (PaymentMethodSpeiRequest.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (PaymentMethodSpeiRequest.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(PaymentMethodSpeiRequest.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'PaymentMethodSpeiRequest'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'PaymentMethodSpeiRequest'", e);
            }

            if (match == 1) {
                CreateCustomerPaymentMethodsRequest ret = new CreateCustomerPaymentMethodsRequest();
                ret.setActualInstance(deserialized);
                return ret;
            }
            throw new IOException(String.format("Failed deserialization for CreateCustomerPaymentMethodsRequest: %d classes match result, expected 1", match));
        }

        /**
         * Handle deserialization of the 'null' value.
         */
        @Override
        public CreateCustomerPaymentMethodsRequest getNullValue(DeserializationContext ctxt) throws JsonMappingException {
            throw new JsonMappingException(ctxt.getParser(), "CreateCustomerPaymentMethodsRequest cannot be null");
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public CreateCustomerPaymentMethodsRequest() {
        super("oneOf", Boolean.FALSE);
    }

    public CreateCustomerPaymentMethodsRequest(PaymentMethodCardRequest o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CreateCustomerPaymentMethodsRequest(PaymentMethodCashRequest o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CreateCustomerPaymentMethodsRequest(PaymentMethodSpeiRequest o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("PaymentMethodCardRequest", new GenericType<PaymentMethodCardRequest>() {
        });
        schemas.put("PaymentMethodCashRequest", new GenericType<PaymentMethodCashRequest>() {
        });
        schemas.put("PaymentMethodSpeiRequest", new GenericType<PaymentMethodSpeiRequest>() {
        });
        JSON.registerDescendants(CreateCustomerPaymentMethodsRequest.class, Collections.unmodifiableMap(schemas));
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return CreateCustomerPaymentMethodsRequest.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * PaymentMethodCardRequest, PaymentMethodCashRequest, PaymentMethodSpeiRequest
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (JSON.isInstanceOf(PaymentMethodCardRequest.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(PaymentMethodCashRequest.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(PaymentMethodSpeiRequest.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be PaymentMethodCardRequest, PaymentMethodCashRequest, PaymentMethodSpeiRequest");
    }

    /**
     * Get the actual instance, which can be the following:
     * PaymentMethodCardRequest, PaymentMethodCashRequest, PaymentMethodSpeiRequest
     *
     * @return The actual instance (PaymentMethodCardRequest, PaymentMethodCashRequest, PaymentMethodSpeiRequest)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `PaymentMethodCardRequest`. If the actual instance is not `PaymentMethodCardRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PaymentMethodCardRequest`
     * @throws ClassCastException if the instance is not `PaymentMethodCardRequest`
     */
    public PaymentMethodCardRequest getPaymentMethodCardRequest() throws ClassCastException {
        return (PaymentMethodCardRequest)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PaymentMethodCashRequest`. If the actual instance is not `PaymentMethodCashRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PaymentMethodCashRequest`
     * @throws ClassCastException if the instance is not `PaymentMethodCashRequest`
     */
    public PaymentMethodCashRequest getPaymentMethodCashRequest() throws ClassCastException {
        return (PaymentMethodCashRequest)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PaymentMethodSpeiRequest`. If the actual instance is not `PaymentMethodSpeiRequest`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PaymentMethodSpeiRequest`
     * @throws ClassCastException if the instance is not `PaymentMethodSpeiRequest`
     */
    public PaymentMethodSpeiRequest getPaymentMethodSpeiRequest() throws ClassCastException {
        return (PaymentMethodSpeiRequest)super.getActualInstance();
    }

}

