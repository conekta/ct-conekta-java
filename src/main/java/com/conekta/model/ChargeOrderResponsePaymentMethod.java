/*
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.conekta.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.conekta.model.PaymentMethodBankTransfer;
import com.conekta.model.PaymentMethodCard;
import com.conekta.model.PaymentMethodCash;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.conekta.JSON;

import com.fasterxml.jackson.core.type.TypeReference;

import jakarta.ws.rs.core.GenericType;
import jakarta.ws.rs.core.Response;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import com.conekta.JSON;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
@JsonDeserialize(using = ChargeOrderResponsePaymentMethod.ChargeOrderResponsePaymentMethodDeserializer.class)
@JsonSerialize(using = ChargeOrderResponsePaymentMethod.ChargeOrderResponsePaymentMethodSerializer.class)
public class ChargeOrderResponsePaymentMethod extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(ChargeOrderResponsePaymentMethod.class.getName());

    public static class ChargeOrderResponsePaymentMethodSerializer extends StdSerializer<ChargeOrderResponsePaymentMethod> {
        public ChargeOrderResponsePaymentMethodSerializer(Class<ChargeOrderResponsePaymentMethod> t) {
            super(t);
        }

        public ChargeOrderResponsePaymentMethodSerializer() {
            this(null);
        }

        @Override
        public void serialize(ChargeOrderResponsePaymentMethod value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
            jgen.writeObject(value.getActualInstance());
        }
    }

    public static class ChargeOrderResponsePaymentMethodDeserializer extends StdDeserializer<ChargeOrderResponsePaymentMethod> {
        public ChargeOrderResponsePaymentMethodDeserializer() {
            this(ChargeOrderResponsePaymentMethod.class);
        }

        public ChargeOrderResponsePaymentMethodDeserializer(Class<?> vc) {
            super(vc);
        }

        @Override
        public ChargeOrderResponsePaymentMethod deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {
            JsonNode tree = jp.readValueAsTree();
            Object deserialized = null;
            ChargeOrderResponsePaymentMethod newChargeOrderResponsePaymentMethod = new ChargeOrderResponsePaymentMethod();
            Map<String,Object> result2 = tree.traverse(jp.getCodec()).readValueAs(new TypeReference<Map<String, Object>>() {});
            String discriminatorValue = (String)result2.get("object");
            switch (discriminatorValue) {
                case "bank_transfer_payment":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(PaymentMethodBankTransfer.class);
                    newChargeOrderResponsePaymentMethod.setActualInstance(deserialized);
                    return newChargeOrderResponsePaymentMethod;
                case "card_payment":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(PaymentMethodCard.class);
                    newChargeOrderResponsePaymentMethod.setActualInstance(deserialized);
                    return newChargeOrderResponsePaymentMethod;
                case "cash_payment":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(PaymentMethodCash.class);
                    newChargeOrderResponsePaymentMethod.setActualInstance(deserialized);
                    return newChargeOrderResponsePaymentMethod;
                case "payment_method_bank_transfer":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(PaymentMethodBankTransfer.class);
                    newChargeOrderResponsePaymentMethod.setActualInstance(deserialized);
                    return newChargeOrderResponsePaymentMethod;
                case "payment_method_card":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(PaymentMethodCard.class);
                    newChargeOrderResponsePaymentMethod.setActualInstance(deserialized);
                    return newChargeOrderResponsePaymentMethod;
                case "payment_method_cash":
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(PaymentMethodCash.class);
                    newChargeOrderResponsePaymentMethod.setActualInstance(deserialized);
                    return newChargeOrderResponsePaymentMethod;
                default:
                    log.log(Level.WARNING, String.format("Failed to lookup discriminator value `%s` for ChargeOrderResponsePaymentMethod. Possible values: bank_transfer_payment card_payment cash_payment payment_method_bank_transfer payment_method_card payment_method_cash", discriminatorValue));
            }

            boolean typeCoercion = ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS);
            int match = 0;
            JsonToken token = tree.traverse(jp.getCodec()).nextToken();
            // deserialize PaymentMethodBankTransfer
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (PaymentMethodBankTransfer.class.equals(Integer.class) || PaymentMethodBankTransfer.class.equals(Long.class) || PaymentMethodBankTransfer.class.equals(Float.class) || PaymentMethodBankTransfer.class.equals(Double.class) || PaymentMethodBankTransfer.class.equals(Boolean.class) || PaymentMethodBankTransfer.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((PaymentMethodBankTransfer.class.equals(Integer.class) || PaymentMethodBankTransfer.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((PaymentMethodBankTransfer.class.equals(Float.class) || PaymentMethodBankTransfer.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (PaymentMethodBankTransfer.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (PaymentMethodBankTransfer.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(PaymentMethodBankTransfer.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'PaymentMethodBankTransfer'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'PaymentMethodBankTransfer'", e);
            }

            // deserialize PaymentMethodCard
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (PaymentMethodCard.class.equals(Integer.class) || PaymentMethodCard.class.equals(Long.class) || PaymentMethodCard.class.equals(Float.class) || PaymentMethodCard.class.equals(Double.class) || PaymentMethodCard.class.equals(Boolean.class) || PaymentMethodCard.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((PaymentMethodCard.class.equals(Integer.class) || PaymentMethodCard.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((PaymentMethodCard.class.equals(Float.class) || PaymentMethodCard.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (PaymentMethodCard.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (PaymentMethodCard.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(PaymentMethodCard.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'PaymentMethodCard'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'PaymentMethodCard'", e);
            }

            // deserialize PaymentMethodCash
            try {
                boolean attemptParsing = true;
                // ensure that we respect type coercion as set on the client ObjectMapper
                if (PaymentMethodCash.class.equals(Integer.class) || PaymentMethodCash.class.equals(Long.class) || PaymentMethodCash.class.equals(Float.class) || PaymentMethodCash.class.equals(Double.class) || PaymentMethodCash.class.equals(Boolean.class) || PaymentMethodCash.class.equals(String.class)) {
                    attemptParsing = typeCoercion;
                    if (!attemptParsing) {
                        attemptParsing |= ((PaymentMethodCash.class.equals(Integer.class) || PaymentMethodCash.class.equals(Long.class)) && token == JsonToken.VALUE_NUMBER_INT);
                        attemptParsing |= ((PaymentMethodCash.class.equals(Float.class) || PaymentMethodCash.class.equals(Double.class)) && token == JsonToken.VALUE_NUMBER_FLOAT);
                        attemptParsing |= (PaymentMethodCash.class.equals(Boolean.class) && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
                        attemptParsing |= (PaymentMethodCash.class.equals(String.class) && token == JsonToken.VALUE_STRING);
                    }
                }
                if (attemptParsing) {
                    deserialized = tree.traverse(jp.getCodec()).readValueAs(PaymentMethodCash.class);
                    // TODO: there is no validation against JSON schema constraints
                    // (min, max, enum, pattern...), this does not perform a strict JSON
                    // validation, which means the 'match' count may be higher than it should be.
                    match++;
                    log.log(Level.FINER, "Input data matches schema 'PaymentMethodCash'");
                }
            } catch (Exception e) {
                // deserialization failed, continue
                log.log(Level.FINER, "Input data does not match schema 'PaymentMethodCash'", e);
            }

            if (match == 1) {
                ChargeOrderResponsePaymentMethod ret = new ChargeOrderResponsePaymentMethod();
                ret.setActualInstance(deserialized);
                return ret;
            }
            throw new IOException(String.format("Failed deserialization for ChargeOrderResponsePaymentMethod: %d classes match result, expected 1", match));
        }

        /**
         * Handle deserialization of the 'null' value.
         */
        @Override
        public ChargeOrderResponsePaymentMethod getNullValue(DeserializationContext ctxt) throws JsonMappingException {
            throw new JsonMappingException(ctxt.getParser(), "ChargeOrderResponsePaymentMethod cannot be null");
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public ChargeOrderResponsePaymentMethod() {
        super("oneOf", Boolean.FALSE);
    }

    public ChargeOrderResponsePaymentMethod(PaymentMethodBankTransfer o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ChargeOrderResponsePaymentMethod(PaymentMethodCard o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ChargeOrderResponsePaymentMethod(PaymentMethodCash o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("PaymentMethodBankTransfer", new GenericType<PaymentMethodBankTransfer>() {
        });
        schemas.put("PaymentMethodCard", new GenericType<PaymentMethodCard>() {
        });
        schemas.put("PaymentMethodCash", new GenericType<PaymentMethodCash>() {
        });
        JSON.registerDescendants(ChargeOrderResponsePaymentMethod.class, Collections.unmodifiableMap(schemas));
        // Initialize and register the discriminator mappings.
        Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
        mappings.put("bank_transfer_payment", PaymentMethodBankTransfer.class);
        mappings.put("card_payment", PaymentMethodCard.class);
        mappings.put("cash_payment", PaymentMethodCash.class);
        mappings.put("payment_method_bank_transfer", PaymentMethodBankTransfer.class);
        mappings.put("payment_method_card", PaymentMethodCard.class);
        mappings.put("payment_method_cash", PaymentMethodCash.class);
        mappings.put("charge_order_response_payment_method", ChargeOrderResponsePaymentMethod.class);
        JSON.registerDiscriminator(ChargeOrderResponsePaymentMethod.class, "object", mappings);
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return ChargeOrderResponsePaymentMethod.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * PaymentMethodBankTransfer, PaymentMethodCard, PaymentMethodCash
     *
     * It could be an instance of the 'oneOf' schemas.
     * The oneOf child schemas may themselves be a composed schema (allOf, anyOf, oneOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (JSON.isInstanceOf(PaymentMethodBankTransfer.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(PaymentMethodCard.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(PaymentMethodCash.class, instance, new HashSet<Class<?>>())) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be PaymentMethodBankTransfer, PaymentMethodCard, PaymentMethodCash");
    }

    /**
     * Get the actual instance, which can be the following:
     * PaymentMethodBankTransfer, PaymentMethodCard, PaymentMethodCash
     *
     * @return The actual instance (PaymentMethodBankTransfer, PaymentMethodCard, PaymentMethodCash)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `PaymentMethodBankTransfer`. If the actual instance is not `PaymentMethodBankTransfer`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PaymentMethodBankTransfer`
     * @throws ClassCastException if the instance is not `PaymentMethodBankTransfer`
     */
    public PaymentMethodBankTransfer getPaymentMethodBankTransfer() throws ClassCastException {
        return (PaymentMethodBankTransfer)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PaymentMethodCard`. If the actual instance is not `PaymentMethodCard`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PaymentMethodCard`
     * @throws ClassCastException if the instance is not `PaymentMethodCard`
     */
    public PaymentMethodCard getPaymentMethodCard() throws ClassCastException {
        return (PaymentMethodCard)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PaymentMethodCash`. If the actual instance is not `PaymentMethodCash`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PaymentMethodCash`
     * @throws ClassCastException if the instance is not `PaymentMethodCash`
     */
    public PaymentMethodCash getPaymentMethodCash() throws ClassCastException {
        return (PaymentMethodCash)super.getActualInstance();
    }

}

