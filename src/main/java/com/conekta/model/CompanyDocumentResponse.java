/*
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.2.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.conekta.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.conekta.JSON;


/**
 * Response body after uploading a company document.
 */
@JsonPropertyOrder({
  CompanyDocumentResponse.JSON_PROPERTY_FILE_CLASSIFICATION,
  CompanyDocumentResponse.JSON_PROPERTY_FILE_NAME,
  CompanyDocumentResponse.JSON_PROPERTY_STATUS
})
@JsonTypeName("company_document_response")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.5.0")
public class CompanyDocumentResponse {
  /**
   * Classification of the document.  | Tipo de archivo              | Descripción                                               | | :--------------------------- | :-------------------------------------------------------- | | &#x60;id_legal_representative&#x60;      | identificación oficial frente                             | | &#x60;id_legal_representative_back&#x60; | identificación oficial atrás                              | | &#x60;cfdi&#x60;                         | Prueba de situación fiscal                                | | &#x60;constitutive_act_basic&#x60;       | Acta constitutiva                                         | | &#x60;proof_of_address&#x60;             | Comprobante de domicilio del negocio                      | | &#x60;power_of_attonery&#x60;            | Poderes de representación                                 | | &#x60;deposit_account_cover&#x60;        | Carátula de la cuenta de depósito                         | | &#x60;permit_casino&#x60;                | Permiso ante SEGOB                                        | | &#x60;license_sanitation&#x60;           | Licencia sanitaria de COFEPRIS                            | | &#x60;registration_tourism&#x60;         | Inscripción ante el Registro Nacional de Turismo (SECTUR) | 
   */
  public enum FileClassificationEnum {
    ID_LEGAL_REPRESENTATIVE("id_legal_representative"),
    
    ID_LEGAL_REPRESENTATIVE_BACK("id_legal_representative_back"),
    
    CFDI("cfdi"),
    
    CONSTITUTIVE_ACT_BASIC("constitutive_act_basic"),
    
    PROOF_OF_ADDRESS("proof_of_address"),
    
    POWER_OF_ATTONERY("power_of_attonery"),
    
    DEPOSIT_ACCOUNT_COVER("deposit_account_cover"),
    
    PERMIT_CASINO("permit_casino"),
    
    LICENSE_SANITATION("license_sanitation"),
    
    REGISTRATION_TOURISM("registration_tourism");

    private String value;

    FileClassificationEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static FileClassificationEnum fromValue(String value) {
      for (FileClassificationEnum b : FileClassificationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_FILE_CLASSIFICATION = "file_classification";
  private FileClassificationEnum fileClassification;

  public static final String JSON_PROPERTY_FILE_NAME = "file_name";
  private String fileName;

  public static final String JSON_PROPERTY_STATUS = "status";
  private String status;

  public CompanyDocumentResponse() { 
  }

  public CompanyDocumentResponse fileClassification(FileClassificationEnum fileClassification) {
    this.fileClassification = fileClassification;
    return this;
  }

   /**
   * Classification of the document.  | Tipo de archivo              | Descripción                                               | | :--------------------------- | :-------------------------------------------------------- | | &#x60;id_legal_representative&#x60;      | identificación oficial frente                             | | &#x60;id_legal_representative_back&#x60; | identificación oficial atrás                              | | &#x60;cfdi&#x60;                         | Prueba de situación fiscal                                | | &#x60;constitutive_act_basic&#x60;       | Acta constitutiva                                         | | &#x60;proof_of_address&#x60;             | Comprobante de domicilio del negocio                      | | &#x60;power_of_attonery&#x60;            | Poderes de representación                                 | | &#x60;deposit_account_cover&#x60;        | Carátula de la cuenta de depósito                         | | &#x60;permit_casino&#x60;                | Permiso ante SEGOB                                        | | &#x60;license_sanitation&#x60;           | Licencia sanitaria de COFEPRIS                            | | &#x60;registration_tourism&#x60;         | Inscripción ante el Registro Nacional de Turismo (SECTUR) | 
   * @return fileClassification
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FILE_CLASSIFICATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public FileClassificationEnum getFileClassification() {
    return fileClassification;
  }


  @JsonProperty(JSON_PROPERTY_FILE_CLASSIFICATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFileClassification(FileClassificationEnum fileClassification) {
    this.fileClassification = fileClassification;
  }


  public CompanyDocumentResponse fileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

   /**
   * Name of the file as stored or processed.
   * @return fileName
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FILE_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getFileName() {
    return fileName;
  }


  @JsonProperty(JSON_PROPERTY_FILE_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFileName(String fileName) {
    this.fileName = fileName;
  }


  public CompanyDocumentResponse status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Current status of the document.
   * @return status
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatus(String status) {
    this.status = status;
  }


  /**
   * Return true if this company_document_response object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompanyDocumentResponse companyDocumentResponse = (CompanyDocumentResponse) o;
    return Objects.equals(this.fileClassification, companyDocumentResponse.fileClassification) &&
        Objects.equals(this.fileName, companyDocumentResponse.fileName) &&
        Objects.equals(this.status, companyDocumentResponse.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fileClassification, fileName, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompanyDocumentResponse {\n");
    sb.append("    fileClassification: ").append(toIndentedString(fileClassification)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

