/*
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.2.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.conekta;

import com.conekta.*;
import com.conekta.auth.*;
import com.conekta.model.Error;
import com.conekta.model.SubscriptionEventsResponse;
import com.conekta.model.SubscriptionRequest;
import com.conekta.model.SubscriptionResponse;
import com.conekta.model.SubscriptionUpdateRequest;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SubscriptionsApi
 */
public class SubscriptionsApiTest {

    private final SubscriptionsApi api = new SubscriptionsApi();

    /**
     * Cancel Subscription [Deprecated]
     *
     * DEPRECATED: This endpoint will be removed in version 2.3.0.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelSubscriptionTest() throws ApiException {
        //String id = null;
        //String acceptLanguage = null;
        //String xChildCompanyId = null;
        //SubscriptionResponse response = api.cancelSubscription(id, acceptLanguage, xChildCompanyId);
        // TODO: test validations
    }

    /**
     * Create Subscription [Deprecated]
     *
     * DEPRECATED: This endpoint will be removed in version 2.3.0. You can create the subscription to include the plans that your customers consume
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSubscriptionTest() throws ApiException {
        //String id = null;
        //SubscriptionRequest subscriptionRequest = null;
        //String acceptLanguage = null;
        //String xChildCompanyId = null;
        //SubscriptionResponse response = api.createSubscription(id, subscriptionRequest, acceptLanguage, xChildCompanyId);
        // TODO: test validations
    }

    /**
     * Get Subscription [Deprecated]
     *
     * DEPRECATED: This endpoint will be removed in version 2.3.0.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubscriptionTest() throws ApiException {
        //String id = null;
        //String acceptLanguage = null;
        //SubscriptionResponse response = api.getSubscription(id, acceptLanguage);
        // TODO: test validations
    }

    /**
     * Get Subscription Events [Deprecated]
     *
     * DEPRECATED: This endpoint will be removed in version 2.3.0. You can get the events of the subscription(s) of a client, with the customer id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubscriptionEventsTest() throws ApiException {
        //String id = null;
        //String acceptLanguage = null;
        //String xChildCompanyId = null;
        //SubscriptionEventsResponse response = api.getSubscriptionEvents(id, acceptLanguage, xChildCompanyId);
        // TODO: test validations
    }

    /**
     * Pause Subscription [Deprecated]
     *
     * DEPRECATED: This endpoint will be removed in version 2.3.0.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pauseSubscriptionTest() throws ApiException {
        //String id = null;
        //String acceptLanguage = null;
        //String xChildCompanyId = null;
        //SubscriptionResponse response = api.pauseSubscription(id, acceptLanguage, xChildCompanyId);
        // TODO: test validations
    }

    /**
     * Resume Subscription [Deprecated]
     *
     * DEPRECATED: This endpoint will be removed in version 2.3.0.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resumeSubscriptionTest() throws ApiException {
        //String id = null;
        //String acceptLanguage = null;
        //String xChildCompanyId = null;
        //SubscriptionResponse response = api.resumeSubscription(id, acceptLanguage, xChildCompanyId);
        // TODO: test validations
    }

    /**
     * Cancel Subscription
     *
     * Cancel a specific subscription
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void subscriptionCancelTest() throws ApiException {
        //String customerId = null;
        //String id = null;
        //String acceptLanguage = null;
        //String xChildCompanyId = null;
        //SubscriptionResponse response = api.subscriptionCancel(customerId, id, acceptLanguage, xChildCompanyId);
        // TODO: test validations
    }

    /**
     * Create Subscription
     *
     * Create a new subscription for a customer (keeps existing subscriptions active)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void subscriptionCreateTest() throws ApiException {
        //String customerId = null;
        //SubscriptionRequest subscriptionRequest = null;
        //String acceptLanguage = null;
        //String xChildCompanyId = null;
        //SubscriptionResponse response = api.subscriptionCreate(customerId, subscriptionRequest, acceptLanguage, xChildCompanyId);
        // TODO: test validations
    }

    /**
     * Get Subscription Events
     *
     * Get events for a specific subscription
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void subscriptionEventsTest() throws ApiException {
        //String customerId = null;
        //String id = null;
        //String acceptLanguage = null;
        //String xChildCompanyId = null;
        //Integer limit = null;
        //String search = null;
        //String next = null;
        //String previous = null;
        //SubscriptionEventsResponse response = api.subscriptionEvents(customerId, id, acceptLanguage, xChildCompanyId, limit, search, next, previous);
        // TODO: test validations
    }

    /**
     * List Subscriptions
     *
     * Get a list of subscriptions for a customer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void subscriptionListTest() throws ApiException {
        //String customerId = null;
        //String acceptLanguage = null;
        //String xChildCompanyId = null;
        //Integer limit = null;
        //String search = null;
        //String next = null;
        //String previous = null;
        //SubscriptionResponse response = api.subscriptionList(customerId, acceptLanguage, xChildCompanyId, limit, search, next, previous);
        // TODO: test validations
    }

    /**
     * Pause Subscription
     *
     * Pause a specific subscription
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void subscriptionPauseTest() throws ApiException {
        //String customerId = null;
        //String id = null;
        //String acceptLanguage = null;
        //String xChildCompanyId = null;
        //SubscriptionResponse response = api.subscriptionPause(customerId, id, acceptLanguage, xChildCompanyId);
        // TODO: test validations
    }

    /**
     * Resume Subscription
     *
     * Resume a specific paused subscription
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void subscriptionResumeTest() throws ApiException {
        //String customerId = null;
        //String id = null;
        //String acceptLanguage = null;
        //String xChildCompanyId = null;
        //SubscriptionResponse response = api.subscriptionResume(customerId, id, acceptLanguage, xChildCompanyId);
        // TODO: test validations
    }

    /**
     * Update Subscription
     *
     * Update a specific subscription
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void subscriptionUpdateTest() throws ApiException {
        //String customerId = null;
        //String id = null;
        //SubscriptionUpdateRequest subscriptionUpdateRequest = null;
        //String acceptLanguage = null;
        //String xChildCompanyId = null;
        //SubscriptionResponse response = api.subscriptionUpdate(customerId, id, subscriptionUpdateRequest, acceptLanguage, xChildCompanyId);
        // TODO: test validations
    }

    /**
     * Get Subscription
     *
     * Retrieve a specific subscription
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void subscriptionsGetTest() throws ApiException {
        //String customerId = null;
        //String id = null;
        //String acceptLanguage = null;
        //String xChildCompanyId = null;
        //SubscriptionResponse response = api.subscriptionsGet(customerId, id, acceptLanguage, xChildCompanyId);
        // TODO: test validations
    }

    /**
     * Retry Failed Payment
     *
     * Retry a failed payment for a specific subscription
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void subscriptionsRetryTest() throws ApiException {
        //String customerId = null;
        //String id = null;
        //String acceptLanguage = null;
        //String xChildCompanyId = null;
        //SubscriptionResponse response = api.subscriptionsRetry(customerId, id, acceptLanguage, xChildCompanyId);
        // TODO: test validations
    }

    /**
     * Update Subscription [Deprecated]
     *
     * DEPRECATED: This endpoint will be removed in version 2.3.0. You can modify the subscription to change the plans that your customers consume
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSubscriptionTest() throws ApiException {
        //String id = null;
        //SubscriptionUpdateRequest subscriptionUpdateRequest = null;
        //String acceptLanguage = null;
        //String xChildCompanyId = null;
        //SubscriptionResponse response = api.updateSubscription(id, subscriptionUpdateRequest, acceptLanguage, xChildCompanyId);
        // TODO: test validations
    }

}
