/*
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.conekta;

import com.conekta.*;
import com.conekta.auth.*;
import com.conekta.model.CreateCustomerFiscalEntitiesResponse;
import com.conekta.model.Customer;
import com.conekta.model.CustomerFiscalEntitiesRequest;
import com.conekta.model.CustomerResponse;
import com.conekta.model.CustomerUpdateFiscalEntitiesRequest;
import com.conekta.model.CustomersResponse;
import com.conekta.model.Error;
import com.conekta.model.UpdateCustomer;
import com.conekta.model.UpdateCustomerFiscalEntitiesResponse;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CustomersApi
 */
public class CustomersApiTest {

    private final CustomersApi api = new CustomersApi(new ApiClient().setBasePath(Utils.getBasePath()));

    /**
     * Create customer
     *
     * The purpose of business is to create and keep a customer, you will learn what elements you need to create a customer. Remember the credit and debit card tokenization process: [https://developers.conekta.com/page/web-checkout-tokenizer](https://developers.conekta.com/page/web-checkout-tokenizer)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCustomerTest() throws ApiException {
        Customer customer = new Customer();
        customer.setEmail("test@test.com");
        customer.setName("Foo Foo");
        String acceptLanguage = "es";
        String xChildCompanyId = "company_child_id";
        CustomerResponse response = api.createCustomer(customer, acceptLanguage, xChildCompanyId);
        Assertions.assertNotNull(response);
    }

    /**
     * Create Fiscal Entity
     *
     * Create Fiscal entity resource that corresponds to a customer ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCustomerFiscalEntitiesTest() throws ApiException {
        String id = "cus_2tYENskzTjjgkGQLt";
        CustomerFiscalEntitiesRequest customerFiscalEntitiesRequest = new CustomerFiscalEntitiesRequest();
        customerFiscalEntitiesRequest.setEmail("foo@test.com");
        customerFiscalEntitiesRequest.setCompanyName("Foo SA");
        String acceptLanguage = "es";
        String xChildCompanyId = "company_child_id";
        CreateCustomerFiscalEntitiesResponse response = api.createCustomerFiscalEntities(id, customerFiscalEntitiesRequest, acceptLanguage, xChildCompanyId);
        Assertions.assertNotNull(response);
    }

    /**
     * Delete Customer
     *
     * Deleted a customer resource that corresponds to a customer ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCustomerByIdTest() throws ApiException {
        String id = "cus_2tYENskzTjjgkGQLt";
        String acceptLanguage = "es";
        String xChildCompanyId = "company_child_id";
        CustomerResponse response = api.deleteCustomerById(id, acceptLanguage, xChildCompanyId);
        Assertions.assertNotNull(response);
    }

    /**
     * Get Customer
     *
     * Gets a customer resource that corresponds to a customer ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCustomerByIdTest() throws ApiException {
        String id = "cus_2tYENskzTjjgkGQLt";
        String acceptLanguage = "es";
        String xChildCompanyId = "company_child_id";
        CustomerResponse response = api.getCustomerById(id, acceptLanguage, xChildCompanyId);
        Assertions.assertNotNull(response);
    }

    /**
     * Get a list of customers
     *
     * The purpose of business is to create and maintain a client, you will learn what elements you need to obtain a list of clients, which can be paged.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCustomersTest() throws ApiException {
        String acceptLanguage = "es";
        String xChildCompanyId = "company_child_id";
        Integer limit = 20;
        CustomersResponse response = api.getCustomers(acceptLanguage, xChildCompanyId, limit, null, null, null);
        Assertions.assertNotNull(response);
    }

    /**
     * Update customer
     *
     * You can update customer-related data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCustomerTest() throws ApiException {
        String id = "cus_2tYENskzTjjgkGQLt";
        UpdateCustomer updateCustomer = new UpdateCustomer();
        updateCustomer.setEmail("test@test.com");
        updateCustomer.setName("Foo SA");
        String acceptLanguage = "es";
        String xChildCompanyId = "company_child_id";
        CustomerResponse response = api.updateCustomer(id, updateCustomer, acceptLanguage, xChildCompanyId);
        Assertions.assertNotNull(response);
    }

    /**
     * Update  Fiscal Entity
     *
     * Update Fiscal Entity resource that corresponds to a customer ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCustomerFiscalEntitiesTest() throws ApiException {
        String id = "cus_2tYENskzTjjgkGQLt";
        String fiscalEntitiesId = "fis_ent_2tYENskzTjjgkGQLr";
        CustomerUpdateFiscalEntitiesRequest customerUpdateFiscalEntitiesRequest = new CustomerUpdateFiscalEntitiesRequest();
        customerUpdateFiscalEntitiesRequest.setEmail("foo@foo.com");
        customerUpdateFiscalEntitiesRequest.setCompanyName("Foo SA");
        String acceptLanguage = "es";
        String xChildCompanyId = "company_child_id";
        UpdateCustomerFiscalEntitiesResponse response = api.updateCustomerFiscalEntities(id, fiscalEntitiesId, customerUpdateFiscalEntitiesRequest, acceptLanguage, xChildCompanyId);
        Assertions.assertNotNull(response);
    }
}
