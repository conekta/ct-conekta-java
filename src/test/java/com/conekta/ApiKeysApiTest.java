/*
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.conekta;

import com.conekta.*;
import com.conekta.auth.*;
import com.conekta.model.ApiKeyCreateResponse;
import com.conekta.model.ApiKeyRequest;
import com.conekta.model.ApiKeyResponse;
import com.conekta.model.ApiKeyUpdateRequest;
import com.conekta.model.DeleteApiKeysResponse;
import com.conekta.model.Error;
import com.conekta.model.GetApiKeysResponse;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ApiKeysApi
 */
public class ApiKeysApiTest {

    private final ApiKeysApi api = new ApiKeysApi(new ApiClient().setBasePath(Utils.getBasePath()));

    /**
     * Create Api Key
     *
     * Create a api key
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createApiKeyTest() throws ApiException {
        ApiKeyRequest apiKeyRequest = new ApiKeyRequest();
        apiKeyRequest.setDescription("description");
        apiKeyRequest.setRole("private");
        String acceptLanguage = "es";
        String xChildCompanyId = "company_child_id";
        ApiKeyCreateResponse response = api.createApiKey(apiKeyRequest, acceptLanguage, xChildCompanyId);
        Assertions.assertNotNull(response);
    }

    /**
     * Delete Api Key
     *
     * Deletes a api key that corresponds to a api key ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteApiKeyTest() throws ApiException {
        String id = "64625cc9f3e02c00163f5e4d";
        String acceptLanguage = "es";
        DeleteApiKeysResponse response = api.deleteApiKey(id, acceptLanguage);
        Assertions.assertNotNull(response);
    }

    /**
     * Get Api Key
     *
     * Gets a api key that corresponds to a api key ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApiKeyTest() throws ApiException {
        String id = "64625cc9f3e02c00163f5e4d";
        String acceptLanguage = "es";
        String xChildCompanyId = "company_child_id";
        ApiKeyResponse response = api.getApiKey(id, acceptLanguage, xChildCompanyId);
        Assertions.assertNotNull(response);
    }

    /**
     * Get list of Api Keys
     *
     * Consume the list of api keys you have
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApiKeysTest() throws ApiException {
        String acceptLanguage = "es";
        String xChildCompanyId = "company_child_id";
        Integer limit = 20;
        GetApiKeysResponse response = api.getApiKeys(acceptLanguage, xChildCompanyId, limit, null, null, null);
        Assertions.assertNotNull(response);
    }

    /**
     * Update Api Key
     *
     * Update an existing api key
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateApiKeyTest() throws ApiException {
        String id = "64625cc9f3e02c00163f5e4d";
        String acceptLanguage = "es";
        ApiKeyUpdateRequest apiKeyUpdateRequest = new ApiKeyUpdateRequest();
        apiKeyUpdateRequest.setActive(false);
        apiKeyUpdateRequest.setDescription("description");
        ApiKeyResponse response = api.updateApiKey(id, acceptLanguage, apiKeyUpdateRequest);
        Assertions.assertNotNull(response);
    }

}
