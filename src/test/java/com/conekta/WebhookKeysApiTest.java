/*
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.conekta;

import com.conekta.*;
import com.conekta.auth.*;
import com.conekta.model.Error;
import com.conekta.model.GetWebhookKeysResponse;
import com.conekta.model.WebhookKeyCreateResponse;
import com.conekta.model.WebhookKeyDeleteResponse;
import com.conekta.model.WebhookKeyRequest;
import com.conekta.model.WebhookKeyResponse;
import com.conekta.model.WebhookKeyUpdateRequest;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WebhookKeysApi
 */
public class WebhookKeysApiTest {

    private final WebhookKeysApi api = new WebhookKeysApi(new ApiClient().setBasePath(Utils.getBasePath()));

    /**
     * Create Webhook Key
     *
     * Create a webhook key
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createWebhookKeyTest() throws ApiException {
        String acceptLanguage = "es";
        WebhookKeyRequest webhookKeyRequest = new WebhookKeyRequest();
        webhookKeyRequest.setActive(true);
        WebhookKeyCreateResponse response = api.createWebhookKey(acceptLanguage, webhookKeyRequest);
        Assertions.assertNotNull(response);
    }

    /**
     * Delete Webhook key
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteWebhookKeyTest() throws ApiException {
        String id = "645a59da22e7da0001cad283";
        String acceptLanguage = "es";
        WebhookKeyDeleteResponse response = api.deleteWebhookKey(id, acceptLanguage);
        Assertions.assertNotNull(response);
    }

    /**
     * Get Webhook Key
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWebhookKeyTest() throws ApiException {
        String id = "645a5eb022e7da0001cad2a4";
        String acceptLanguage = "es";
        WebhookKeyResponse response = api.getWebhookKey(id, acceptLanguage, null);
        Assertions.assertNotNull(response);
    }

    /**
     * Get List of Webhook Keys
     *
     * Consume the list of webhook keys you have
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWebhookKeysTest() throws ApiException {
        String acceptLanguage = "es";
        Integer limit = 2;
        GetWebhookKeysResponse response = api.getWebhookKeys(acceptLanguage, null, limit, null, null, null);
        Assertions.assertNotNull(response);
    }

    /**
     * Update Webhook Key
     *
     * updates an existing webhook key
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateWebhookKeyTest() throws ApiException {
        String id = "645a613622e7da0001cad882";
        String acceptLanguage = "es";
        WebhookKeyUpdateRequest webhookKeyUpdateRequest = new WebhookKeyUpdateRequest();
        webhookKeyUpdateRequest.setActive(false);
        WebhookKeyResponse response = api.updateWebhookKey(id, acceptLanguage, webhookKeyUpdateRequest);
        Assertions.assertNotNull(response);
    }

}
