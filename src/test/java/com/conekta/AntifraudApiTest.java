/*
 * Conekta API
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.conekta;

import com.conekta.*;
import com.conekta.auth.*;
import com.conekta.model.BlacklistRuleResponse;
import com.conekta.model.CreateRiskRulesData;
import com.conekta.model.DeletedBlacklistRuleResponse;
import com.conekta.model.DeletedWhitelistRuleResponse;
import com.conekta.model.Error;
import com.conekta.model.RiskRulesList;
import com.conekta.model.WhitelistlistRuleResponse;

import com.fasterxml.jackson.annotation.JsonTypeInfo;
import org.apache.http.HttpStatus;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AntifraudApi
 */
public class AntifraudApiTest {

    private final AntifraudApi api = new AntifraudApi(new ApiClient().setBasePath(Utils.getBasePath()));

    /**
     * Create blacklisted rule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRuleBlacklistTest() throws ApiException {
        String acceptLanguage = "es";
        CreateRiskRulesData createRiskRulesData = new CreateRiskRulesData();
        createRiskRulesData.setDescription("description");
        createRiskRulesData.setField("field");
        createRiskRulesData.setValue("value");
        BlacklistRuleResponse response = api.createRuleBlacklist(createRiskRulesData, acceptLanguage);
        Assertions.assertNotNull(response);
    }

    /**
     * Create whitelisted rule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRuleWhitelistTest() throws ApiException {
        String acceptLanguage = "es";
        CreateRiskRulesData createRiskRulesData = new CreateRiskRulesData();
        createRiskRulesData.setDescription("description");
        createRiskRulesData.setField("field");
        createRiskRulesData.setValue("value");
        WhitelistlistRuleResponse response = api.createRuleWhitelist(acceptLanguage, createRiskRulesData);
        Assertions.assertNotNull(response);
    }

    /**
     * Delete blacklisted rule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRuleBlacklistTest() throws ApiException {
        String acceptLanguage = "es";
        String id = "id";
        String xChildCompanyId = "company_child_id";
        DeletedBlacklistRuleResponse response = api.deleteRuleBlacklist(id, acceptLanguage, xChildCompanyId);
        Assertions.assertNotNull(response);
    }

    /**
     * Delete whitelisted rule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRuleWhitelistTest() throws ApiException {
        String acceptLanguage = "es";
        String id = "id";
        String xChildCompanyId = "company_child_id";
        DeletedWhitelistRuleResponse response = api.deleteRuleWhitelist(id, acceptLanguage, xChildCompanyId);
        Assertions.assertNotNull(response);
    }

    /**
     * Get list of blacklisted rules
     *
     * Return all rules
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRuleBlacklistTest() throws ApiException {
        String acceptLanguage = "es";
        RiskRulesList response = api.getRuleBlacklist(acceptLanguage);
        Assertions.assertNotNull(response);
    }

    /**
     * Get a list of whitelisted rules
     *
     * Return all rules
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRuleWhitelistTest() throws ApiException {
        String acceptLanguage = "es";
        RiskRulesList response = api.getRuleWhitelist(acceptLanguage);
        Assertions.assertNotNull(response);
    }

}
